variables:
  # These two are used as fixed versions of u-boot and Linux kernel for tag builds
  u_boot_tag: 'v2020.01-rc5-ci'
  kernel_version: '5.5.0-rc1-g3b4bd59b3-sigmaris'

resources:
  pipelines:
    - pipeline: linux
      source: sigmaris.linux
      trigger: true
    - pipeline: uboot
      source: sigmaris.u-boot
      trigger: true

trigger:
  batch: false
  branches:
    include:
      - master
      - ci-*
  tags:
    include:
      - '*-ci'

jobs:
- job: build_images
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      debian_buster:
        dist: debian
        suite: buster
      debian_bullseye:
        dist: debian
        suite: bullseye
      ubuntu_focal:
        dist: ubuntu
        suite: focal
  steps:
  - download: uboot
    artifact: mmc_u-boot
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    displayName: "Download MMC u-boot artifacts from latest Pipelines build"
  - script: |
      set -ex
      cp $(Pipeline.Workspace)/uboot/mmc_u-boot/mmc_* $(Build.ArtifactStagingDirectory)
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    displayName: "Copy MMC u-boot artifacts from latest Pipelines build to artifact staging directory"
  - task: DownloadGitHubRelease@0
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    displayName: "Download MMC u-boot artifacts from Github release"
    inputs:
      connection: sigmaris_token
      userRepository: sigmaris/u-boot
      defaultVersionType: 'specificTag'
      version: '$(u_boot_tag)'
      itemPattern: 'mmc_*'
      downloadPath: '$(Build.ArtifactStagingDirectory)'

  - download: linux
    artifact: linuxdebs
    patterns: '**/linux-image-*.deb'
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    displayName: "Download linux-image Debian package from latest Pipelines build"
  - script: |
      set -ex
      rm $(Pipeline.Workspace)/linux/linuxdebs/linux-image-*-dbg_*_arm64.deb
      cp -r $(Pipeline.Workspace)/linux/linuxdebs $(Build.ArtifactStagingDirectory)
      echo 'KERNEL_VERSION=""' >> build.vars
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    displayName: "Copy linux-image Debian package from latest Pipelines build to artifact staging directory"
  - script: |
      set -ex
      echo 'KERNEL_VERSION="$(kernel_version)"' >> build.vars
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    displayName: "Set version of linux-image Debian package from repository to use"

  - script: |
      set -ex
      . build.vars
      sudo apt-get update
      sudo apt-get install -y debian-archive-keyring debos device-tree-compiler
      DEBOS_TEMPLATE_VARS=("dist:$(dist)")
      DEBOS_TEMPLATE_VARS+=("suite:$(suite)")
      if [ -n "$KERNEL_VERSION" ]; then
        DEBOS_TEMPLATE_VARS+=("repo_kernel_version:${KERNEL_VERSION}")
      fi
      sudo debos --artifactdir="$(Build.ArtifactStagingDirectory)" "${DEBOS_TEMPLATE_VARS[@]/#/--template-var=}" recipes/rockpro64.yaml
      sudo chown $(id -u):$(id -g) $(dist)-$(suite)-rockpro64.img
      gzip $(dist)-$(suite)-rockpro64.img
    displayName: Run debos to create image then gzip it

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(dist)-$(suite)-rockpro64.img.gz'
      artifactName: image
    displayName: Publish image as build artifact

- job: github_release
  dependsOn:
  - build_images
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - checkout: none  #skip checking out the default repository resource

  - task: DownloadBuildArtifacts@0
    displayName: 'Download image artifacts'
    inputs:
      artifactName: image
      downloadPath: '$(System.DefaultWorkingDirectory)'

  - script: |
      cp $(System.DefaultWorkingDirectory)/image/* '$(Build.ArtifactStagingDirectory)'
    displayName: Copy build artifacts to staging directory

  - task: GithubRelease@0
    displayName: 'Create Github release with images'
    inputs:
      gitHubConnection: sigmaris_token
      repositoryName: sigmaris/rockpro64-img-build
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'auto'
      title: 'RockPro64 images $(Build.SourceBranchName)'
      assets: '$(Build.ArtifactStagingDirectory)/*'
