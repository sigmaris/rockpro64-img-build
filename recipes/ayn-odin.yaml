{{- $suite := or .suite "bookworm" -}}
{{- $dist := or .dist "debian" -}}
{{- $default_image := printf "%s-%s-sdm845odin.img" $dist $suite -}}
{{- $image := or .image $default_image -}}
architecture: arm64

actions:
{{ if .extract }}
  - action: unpack
    file: "{{ $suite }}-rootfs.tar.gz"
    description: unpack pre-built rootfs
{{ else }}
  - action: debootstrap
    suite: "{{ $suite }}"
    keyring-file: /usr/share/keyrings/{{ $dist }}-archive-keyring.gpg
    components:
      - main
{{ if eq $dist "debian" }}
      - contrib
      - non-free
      - non-free-firmware
    mirror: https://deb.debian.org/debian
{{ else }}
      - restricted
      - universe
    mirror: http://ports.ubuntu.com
{{ end }}
    description: debootstrap root filesystem from scratch

  - action: pack
    file: "{{ $suite }}-rootfs.tar.gz"
    compression: gz
    description: save basic root filesystem for later use
{{ end }}
  - action: apt
    packages:
      - bluez-firmware
      - curl
      - dbus
      - default-dbus-session-bus
      - file
      - firmware-atheros
      - firmware-qcom-soc
      - gdisk
      - gnupg
      - initramfs-tools
      - locales
      - lsb-release
      - man-db
      - openssh-server
      - parted
      - protection-domain-mapper
      - rmtfs
      - sudo
      - systemd-resolved
      - systemd-timesyncd
      - tqftpserv
      - u-boot-tools
      - u-boot-menu
      - vim
      - wget
      - wpasupplicant
      - zstd
    description: install some minimal packages

  - action: run
    chroot: true
    command: echo RESUME=none > /etc/initramfs-tools/conf.d/resume
    description: Disable resuming from hibernation as it causes delay in boot

  - action: overlay
    source: ../overlays/ssh-keygen
    description: >-
      Set up script to run at first boot to regenerate SSH keys if missing

  - action: run
    chroot: true
    script: ../scripts/setup-openssh.sh
    description: Remove SSH host keys so they are regenerated on boot

  - action: overlay
    source: ../overlays/apt-repo
    description: Add our custom APT repo GPG key and blacklist

{{ if and (eq $dist "debian") (eq $suite "bookworm") }}
  - action: run
    chroot: true
    command: echo "deb http://sigmaris.github.io/rockpkgs {{ $suite }} main" > /etc/apt/sources.list.d/sigmaris_rockpkgs.list
    description: Configure our custom APT repo

  - action: run
    chroot: true
    script: ../scripts/apt-repo.sh
    description: Trust our custom APT repo's GPG key then remove it
{{ end }}

  - action: run
    chroot: true
    script: ../scripts/setup-user.sh
    description: Set up the 'rock' user

  - action: run
    chroot: true
    command: echo odin > /etc/hostname

  - action: overlay
    source: ../overlays/wpa-supplicant
    description: Configure wpa-supplicant for connecting to WiFi networks

  - action: run
    chroot: true
    command: systemctl disable wpa_supplicant.service
    description: Disable DBUS-controlled wpa_supplicant

  - action: run
    chroot: true
    command: systemctl enable wpa_supplicant@wlan0.service
    description: Enable wpa_supplicant for wlan0

  - action: overlay
    source: ../overlays/networkd
    description: Configure systemd-networkd to use DHCP for the wired and wireless networks

  - action: run
    chroot: true
    script: ../scripts/setup-networking.sh
    description: Use systemd tools for network config, DNS and time sync

{{ if .personalize }}
  - action: run
    chroot: true
    script: ../scripts/insert-wifi-details.sh
    description: Insert site-specific wifi details
{{ end }}

  - action: overlay
    origin: artifacts
    source: linuxdebs
    destination: /linuxdebs
    description: Copy in pre-built kernel package files

  - action: run
    command: dpkg -i /linuxdebs/*.deb
    chroot: true
    description: Install pre-built kernel package files

  - action: run
    command: rm -rf /linuxdebs
    chroot: true
    description: Clean pre-built kernel package files off filesystem after installation.

  - action: overlay
    source: ../overlays/odin-debugging
    description: Configure things for debugging bootup

  - action: run
    chroot: true
    command: systemctl disable getty@tty1.service
    description: Disable getty for debugging bootup

  - action: run
    chroot: true
    command: apt-get clean
    description: Save space by removing apt cache

  - action: image-partition
    description: Partition SD card image
    imagename: "{{ $image }}"
    imagesize: 1500MB
    partitiontype: gpt
    mountpoints:
      - mountpoint: /
        partition: root
    partitions:
      - name: root
        fs: ext4
        start: 0%
        end: 100%

  - action: filesystem-deploy
    setup-fstab: true
    setup-kernel-cmdline: true
    description: >-
      Deploy filesystem onto image, generate /etc/fstab and /etc/kernel/cmdline,
      and switch the chroot to the mounted image's root filesystem
      (further chroot commands affect the root filesystem inside the image)

  - action: run
    chroot: false
    command: ln -sf /run/systemd/resolve/stub-resolv.conf "${ROOTDIR}/etc/resolv.conf"
    description: >-
      Replace /etc/resolv.conf with a symlink to systemd-resolved's stub resolver
      config file. This would break DNS inside the chroot so is done last.
